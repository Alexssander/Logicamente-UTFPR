
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Mon Jun 28 03:01:45 BRT 2010
//----------------------------------------------------

package logicamente.parser;

import logicamente.formulas.*;

/** CUP v0.10k generated parser.
  * @version Mon Jun 28 03:01:45 BRT 2010
  */
public class SyntaxTreeParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SyntaxTreeParser() {super();}

  /** Constructor which sets the default scanner. */
  public SyntaxTreeParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\010\000\002\004\005\000\002\002\004\000\002\004" +
    "\005\000\002\004\005\000\002\004\004\000\002\004\003" +
    "\000\002\005\005\000\002\005\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\010\004\006\010\007\012\004\001\002\000" +
    "\014\002\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\001\002" +
    "\000\014\002\ufffc\005\ufffc\006\ufffc\007\ufffc\011\ufffc\001" +
    "\002\000\010\004\006\010\007\012\004\001\002\000\010" +
    "\004\006\010\007\012\004\001\002\000\012\002\013\005" +
    "\012\006\014\007\011\001\002\000\010\004\006\010\007" +
    "\012\004\001\002\000\010\004\006\010\007\012\004\001" +
    "\002\000\004\002\000\001\002\000\010\004\006\010\007" +
    "\012\004\001\002\000\014\002\uffff\005\012\006\uffff\007" +
    "\uffff\011\uffff\001\002\000\014\002\001\005\001\006\001" +
    "\007\001\011\001\001\002\000\014\002\ufffe\005\012\006" +
    "\014\007\011\011\ufffe\001\002\000\012\005\012\006\014" +
    "\007\011\011\021\001\002\000\014\002\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\011\ufffb\001\002\000\014\002\ufffd\005\ufffd" +
    "\006\ufffd\007\ufffd\011\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\004\007\005\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\021\005\004\001\001" +
    "\000\006\004\017\005\004\001\001\000\002\001\001\000" +
    "\006\004\016\005\004\001\001\000\006\004\015\005\004" +
    "\001\001\000\002\001\001\000\006\004\014\005\004\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SyntaxTreeParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SyntaxTreeParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SyntaxTreeParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info){

        StringBuffer m = new StringBuffer("Error");

        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }

        m.append(" : "+message);

    	throw new Error (m.toString());
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SyntaxTreeParser$actions {
  private final SyntaxTreeParser parser;

  /** Constructor */
  CUP$SyntaxTreeParser$actions(SyntaxTreeParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SyntaxTreeParser$do_action(
    int                        CUP$SyntaxTreeParser$act_num,
    java_cup.runtime.lr_parser CUP$SyntaxTreeParser$parser,
    java.util.Stack            CUP$SyntaxTreeParser$stack,
    int                        CUP$SyntaxTreeParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SyntaxTreeParser$result;

      /* select the action based on the action number */
      switch (CUP$SyntaxTreeParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // term ::= ID 
            {
              Formula RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).value;
		 RESULT = new AtomicFormula(i); 
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxTreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // term ::= LPAREN expr RPAREN 
            {
              Formula RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).right;
		Formula e = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).value;
		 RESULT = e; 
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(3/*term*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxTreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= term 
            {
              Formula RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right;
		Formula t = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).value;
		 RESULT = t; 
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxTreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= NEG expr 
            {
              Formula RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right;
		Formula e = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).value;
		 RESULT = new CompositeFormula(Formula.NOT, e);
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxTreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr ::= expr IMPLIES expr 
            {
              Formula RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).right;
		Formula e1 = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right;
		Formula e2 = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).value;
		 RESULT = new CompositeFormula(Formula.IMPLIES, e1, e2);
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxTreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr ::= expr OR expr 
            {
              Formula RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).right;
		Formula e1 = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right;
		Formula e2 = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).value;
		 RESULT = new CompositeFormula(Formula.OR, e1, e2);
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxTreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).right;
		Formula start_val = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).value;
		RESULT = start_val;
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$SyntaxTreeParser$parser.done_parsing();
          return CUP$SyntaxTreeParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr ::= expr AND expr 
            {
              Formula RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).right;
		Formula e1 = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right;
		Formula e2 = (Formula)((java_cup.runtime.Symbol) CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).value;
		 RESULT = new CompositeFormula(Formula.AND, e1, e2); 
              CUP$SyntaxTreeParser$result = new java_cup.runtime.Symbol(2/*expr*/, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$SyntaxTreeParser$stack.elementAt(CUP$SyntaxTreeParser$top-0)).right, RESULT);
            }
          return CUP$SyntaxTreeParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

